const { obtenerAmigos } = require("../dao/AmistadDao"); // Función para obtener amigos de un usuario
const usuariosConectados = {}; // Almacena usuarios en línea { idUsuario: socketId }

/* Tiempo de reconexión 20 seg */
const reconexionTimeout = 20000; // Tiempo en milisegundos para esperar reconexión (ej. 20 segundos)

// Maneja la reconexión de un usuario
const manejarReconectarUsuarios = (socket, usuariosConectados, io) => {
    // Evento para manejar reconexiones: desde el cliente nos tienen enviar su id de usuario
    // y la sala a la que pertenecía
    socket.on("reconectar", async ({ idUsuario, idSala }) => {
        // Verificar si el usuario ya está registrado en la lista de conectados
        if (usuariosConectados[idUsuario]) {
            // Si el usuario se reconecta, actualizamos su socketId
            usuariosConectados[idUsuario] = socket.id;

            // Emitir a los amigos del usuario que ahora está en línea
            const amigos = await obtenerAmigos(idUsuario);  // Supongamos que tienes una función para obtener amigos
            amigos.forEach((idAmigo) => {
                if (usuariosConectados[idAmigo]) {
                    io.to(usuariosConectados[idAmigo]).emit("estadoAmigo", { idUsuario, en_linea: true });
                }
            });

            console.log(`Usuario ${idUsuario} se reconectó`);
            if (idSala) {
                const sala = salas[idSala];
                if (sala) {
                    const usuario = sala.jugadores.find(j => j.id === idUsuario);
                    // Si el usuario existe y está marcado como desconectado
                    if (usuario && usuario.desconectado) {
                        // Actualiza el socketId y marca al usuario como reconectado (se vuelve a conectar)
                        usuario.socketId = socket.id;
                        usuario.desconectado = false;
                        socket.join(idSala);
                        io.to(idSala).emit("actualizarSala", sala);
                        console.log(`Usuario ${idUsuario} se reconectó a la sala ${idSala}`);
                    }
                } else {
                    console.log(`Reconexión fallida: usuario ${idUsuario} no encontrado en la sala ${idSala}`);
                }
            }
        } else {
            console.log(`Reconexión fallida: usuario ${idUsuario} no encontrado`);
        }
    });
};

// Maneja la conexión de usuarios
const manejarConexionUsuarios = (socket, io) => {
    // Registrar usuario en línea y notificar a sus amigos
    socket.on("registrarUsuario", async ({ idUsuario }) => {
        usuariosConectados[idUsuario] = socket.id;

        // Obtener amigos del usuario
        const amigos = await obtenerAmigos(idUsuario);

        // Notificar a los amigos del usuario sobre su conexión
        amigos.forEach((idAmigo) => {
        if (usuariosConectados[idAmigo]) {
            io.to(usuariosConectados[idAmigo]).emit("estadoAmigo", { idUsuario, en_linea: true });
        }
        });
    });

    // Un usuario solicita el estado de sus amigos
    socket.on("solicitarEstadoAmigos", async ({ idUsuario }) => {
        const amigos = await obtenerAmigos(idUsuario);
        const estadoAmigos = amigos.map(idAmigo => ({
            idUsuario: idAmigo,
            en_linea: !!usuariosConectados[idAmigo]
        }));

        socket.emit("estadoAmigos", estadoAmigos);
    });
};


// Maneja la desconexión de usuarios
const manejarDesconexionUsuarios = (socket, salas, io) => {
    /**
     * Maneja la desconexión de un usuario.
     * @event disconnect
     */
    socket.on("disconnect", () => {
        console.log(`Usuario desconectado: ${socket.id}`);
    
        // Buscar en todas las salas si existe un usuario con ese socketId
        for (const idSala in salas) {
            const sala = salas[idSala];
            const usuario = sala.jugadores.find(j => j.socketId === socket.id);
            if (usuario) {
                // Marcar al usuario como desconectado
                usuario.desconectado = true;
        
                // Establecemos un tiempo de espera (10seg) para confirmar la desconexión definitiva
                setTimeout(() => {
                    // Si el usuario sigue marcado como desconectado, eliminarlo de la sala
                    if (usuario.desconectado) {
                        sala.jugadores = sala.jugadores.filter(j => j.socketId !== socket.id);

                        // Si la sala queda vacía, eliminamos la sala
                        if (sala.jugadores.length === 0) {
                            delete salas[idSala];
                            console.log(`Sala ${idSala} eliminada por falta de jugadores`);
                        } else if (sala.lider === usuario.id) {
                            // Si el líder de la sala se desconecta, asignar un nuevo líder
                            sala.lider = sala.jugadores[0].id;
                            console.log(`Lider ${usuario.id} eliminado de la sala ${idSala}. Nuevo líder asignado: ${sala.lider}`);
                        }
                        io.to(idSala).emit("actualizarSala", sala);
                        console.log(`Usuario ${usuario.id} eliminado de la sala ${idSala} por desconexión.`);
                    }
                }, reconexionTimeout);

                break; // Se encontró la sala, salimos del bucle
            }
        }

        // Quitar al usuario de usuariosConectados y notificar a sus amigos
        for (const idUsuario in usuariosConectados) {
            if (usuariosConectados[idUsuario] === socket.id) {
                delete usuariosConectados[idUsuario];

                // Notificar a los amigos de su desconexión
                io.emit("estadoAmigo", { idUsuario, en_linea: false });
                console.log(`Usuario ${idUsuario} desconectado`);
                break;
            }
        }
    });
};

module.exports = { manejarConexionUsuarios, manejarDesconexionUsuarios };
